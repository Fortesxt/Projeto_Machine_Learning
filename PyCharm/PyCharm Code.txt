from keras.models import load_model
import cv2
import numpy as np
import serial

# Initialize serial connection with Arduino
arduino = serial.Serial('COM3', 9600)  # Replace 'COM3' with the correct serial port of your Arduino and use the appropriate communication speed

# Load the model
model = load_model("1PFinal.h5", compile=False)

# Load the labels
class_names = [line.strip().split(' ', 1)[1] for line in open("1labelsFinal.txt", "r").readlines()]

# CAMERA can be 0 or 1 based on the default camera of your computer
camera = cv2.VideoCapture(0)

# Initialize a variable to track the previous class detected
previous_class = ""

while True:
    # Grab the web camera's image.
    ret, image = camera.read()

    # Resize the raw image into (224-height,224-width) pixels
    image = cv2.resize(image, (224, 224), interpolation=cv2.INTER_AREA)

    # Make the image a numpy array and reshape it to the model's input shape.
    image_array = np.asarray(image, dtype=np.float32).reshape(1, 224, 224, 3)

    # Normalize the image array
    image_input = (image_array / 127.5) - 1

    # Predict the model
    prediction = model.predict(image_input)
    index = np.argmax(prediction)
    class_name = class_names[index]
    confidence_score = prediction[0][index]

    # Draw text on the image
    cv2.putText(image, f"Class: {class_name}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)

    # Show the image with text in a window
    cv2.imshow("Classified Image", image)

    # Send signal to Arduino based on detection result
    if class_name == "Nada":
        print("Nada detectado! Enviando sinal para desligar ambos os LEDs.")
        if previous_class != "Nada":  # Check if previous class was not "Nada"
            arduino.write("N".encode())  # Send "N" to turn off both LEDs on Arduino
        previous_class = class_name
    elif class_name == "Capacete e Concha":
        print("Capacete e Concha detectados! Enviando sinal para ligar o LED verde.")
        arduino.write("G".encode())  # Send "G" to turn on green LED on Arduino
        previous_class = class_name
    elif class_name == "Capacete" or class_name == "Concha":
        print(f"{class_name} detectado! Enviando sinal para ligar o LED vermelho.")
        arduino.write("R".encode())  # Send "R" to turn on red LED on Arduino
        previous_class = class_name

    # Listen to the keyboard for presses.
    keyboard_input = cv2.waitKey(1)

    # 27 is the ASCII for the esc key on your keyboard.
    if keyboard_input == 27:
        break

camera.release()
cv2.destroyAllWindows()